# AWS CI/CD Pipeline with Terraform

This project sets up a CI/CD pipeline using AWS CodePipeline, CodeDeploy, and EC2 instances. The pipeline is configured to detect changes in a GitHub repository and deploy those changes to an EC2 instance. The entire infrastructure is managed using Terraform.

## Prerequisites

- [Terraform](https://www.terraform.io/downloads.html) installed on your machine
- An AWS account with appropriate permissions
- A GitHub account and repository
- AWS CLI configured with your credentials
- GitHub Personal Access Token

## Project Structure

The project is divided into several Terraform configuration files:

- `provider.tf`: Defines the AWS provider and region. This file sets up the AWS provider, which is necessary for Terraform to interact with AWS services.
- `s3.tf`: Creates an S3 bucket for storing pipeline artifacts. This file creates an S3 bucket to store artifacts generated by CodePipeline.
- `iam.tf`: Creates IAM roles and policies for CodePipeline. This file creates IAM roles and policies that allow CodePipeline to interact with other AWS services.
- `codepipeline.tf`: Defines the CodePipeline resource. This file defines the CodePipeline resource, specifying the stages and actions of the pipeline.
- `codedeploy.tf`: Creates CodeDeploy application and deployment group. 
- `ec2.tf`: Creates an EC2 instance and installs the CodeDeploy agent. 
- `codestar.tf`: Creates a CodeStar Connection to GitHub. 


## How to Deploy
Initialize Terraform: Run the following command to initialize Terraform.
~terraform init

Plan the Deployment: Run the following command to see the execution plan.
~terraform Plan 

Apply the Deployment: Run the following command to apply the changes.
~terraform apply 

Verify the Setup: Push changes to your GitHub repository and check AWS CodePipeline to see if it detects the changes and triggers the pipeline. Verify that the changes are deployed to the EC2 instance.

## Notes
Region: Change the region in provider.tf to your desired AWS region.
Bucket Name: Change the bucket name in s3.tf to a unique name.
Role Name: Change the role name in iam.tf if desired.
Pipeline Name: Change the pipeline name in codepipeline.tf.
GitHub Configuration: Update the GitHub username, repository name, branch, and OAuth token in codepipeline.tf.
Application and Deployment Group Names: Change the application name and deployment group name in codedeploy.tf.
EC2 Instance Configuration: Change the AMI ID, instance type, and instance name in ec2.tf.

## Cleanup
To destroy the resources created by Terraform, run the following command:
~terraform destroy


## Pushing Code to GitHub
To push all of the code to GitHub, follow these steps:

- Initialize a Git Repository: If you haven't already, initialize a Git repository in your project directory.
git init

- Add Remote Repository: Add your GitHub repository as a remote.
git remote add origin https://github.com/your-github-username/your-repo-name.git

- Add Files: Add all the files to the staging area.
git add .

- Commit Changes: Commit the changes with a message.
git commit -m "Initial commit"

- Push to GitHub: Push the changes to the remote repository.
git push -u origin main